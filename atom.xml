<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jwxhhxx.github.io/</id>
    <title>Summer/JWX</title>
    <updated>2019-06-22T08:08:52.820Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jwxhhxx.github.io/"/>
    <link rel="self" href="https://jwxhhxx.github.io//atom.xml"/>
    <subtitle>宝剑尚未配妥，转身已是江湖</subtitle>
    <logo>https://jwxhhxx.github.io//images/avatar.png</logo>
    <icon>https://jwxhhxx.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Summer/JWX</rights>
    <entry>
        <title type="html"><![CDATA[关于响应式布局]]></title>
        <id>https://jwxhhxx.github.io//post/guan-yu-xiang-ying-shi-bu-ju</id>
        <link href="https://jwxhhxx.github.io//post/guan-yu-xiang-ying-shi-bu-ju">
        </link>
        <updated>2019-06-22T07:49:08.000Z</updated>
        <content type="html"><![CDATA[<p><strong>1正确理解响应式布局</strong>
响应式网页设计就是使得一个网站能够兼容多个终端，而不是为每个终端做一个特定的版本。打个比方来说：现在社会有很多响应产品，例如折叠沙发，折叠床等等，当我们需要把沙发放到一个角落的时候，此刻沙发就好比div吧，而角落里的某个地方就好比父元素，由于父元素空间的改变，我们不得不调整div,让它能够依然放在角落里。在项目中你会遇到不同的终端，由于终端分辨率不同，所以你要想让用户体验更好，就必要让你的页面能够兼容多个终端。
<strong>2响应式设计的步骤</strong>
2.1.布局及设置meta标签
当创建一个响应式网站，或者非响应式网站变成响应式的时候，首先要关注元素的布局。我在创建响应式布局的时候习惯先写非响应式布局，页面固定宽度大小。如果完成了非响应式那么我在去添加媒体查询（Media Query)和响应式代码。这种操作更容易实现响应式特性。
当你完成当你已经完成了无响应的网站，做的第一件事是在你的 HTML 页面，粘贴下面的代码到和标签之间。这将设置屏幕按1：1的尺寸显示，在 iPhone 和其他智能手机的浏览器提供网站全视图浏览，并禁止用户缩放页面。</p>
<pre><code>
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;
&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;
&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;
user-scalable属性能够解决ipad切换横屏之后触摸才能回到具体尺寸的问题。
</code></pre>
<p>2.2通过媒体查询来设置样式media query
media query 是响应式设计的核心，它能够和浏览器进行沟通，告诉浏览器页面如何呈现，假如一个终端的分辨率小于980px，那么可以这样写</p>
<pre><code> @media screen and (max-width:980px){
     #head { … }
     #content { … }
     #footer { … }
}这里面的样式会覆盖掉之前所定义的样式。
</code></pre>
<p>2.3设置多种视图宽度
.假如我们要兼容ipad和iphone视图，我们可以这样设置：</p>
<pre><code>/**ipad**/
@media only screen and (min-width:768px)and(max-width:1024px){}
/**iphone**/
 @media only screen and (width:320px)and (width:768px){}
</code></pre>
<p>2.4字体设置
到目前为止，开发人员用到的字体单位大部分都是像素，虽然像素在普通网站上是Ok的，但是我们仍然需要响应式字体。一个响应式的字体应关联它的父容器的宽度，这样才能适应客户端屏幕。</p>
<p>css3引入了新的单位叫做rem,和em类似但对于Html元素，rem更方便使用。</p>
<p>rem是相对于根元素的，不要忘记重置根元素字体大小：</p>
<p>html{font-size:100%;}
完成后，你可以定义响应式字体：</p>
<pre><code>@media (min-width:640px){body{font-size:1rem;}}
@media (min-width:960px){body{font-size:1.2rem;}}
@media (min-width:1200px){body{font-size:1.5rem;}}

</code></pre>
<p><strong>3直接引入css文档</strong>
还有一种方法是通过引入css文件，将其media设定宽度来实现，相同的样式可以放在一个css文档中，不同的样式单独放。</p>
<pre><code>  &lt;link rel=&quot;stylesheet&quot; href=&quot;common.css&quot;&gt;
  &lt;link media=&quot;(min-width: 500px)&quot; rel=&quot;stylesheet&quot; href=&quot;desktop.css&quot;&gt;
  &lt;link media=&quot;(max-width: 500px)&quot; rel=&quot;stylesheet&quot; href=&quot;mobile.css&quot;&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[v-if和v-show的区别]]></title>
        <id>https://jwxhhxx.github.io//post/v-if-he-v-show-de-qu-bie</id>
        <link href="https://jwxhhxx.github.io//post/v-if-he-v-show-de-qu-bie">
        </link>
        <updated>2019-06-20T04:19:02.000Z</updated>
        <content type="html"><![CDATA[<p>简单来说，v-if 的初始化较快，但切换代价高；v-show 初始化慢，但切换成本低。如果元素涉及频繁的切换最好不要使用v-if，会造成消耗，如果元素不被看见，可以使用v-if而不使用v-show 。
<strong>1.共同点</strong>
用于根据条件展示元素
<strong>2.区别</strong>
（1）手段：
v-if是动态的向DOM树内添加或者删除DOM元素；
v-show是通过设置DOM元素的display样式属性控制显隐； v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。
（2）编译过程：
v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；
v-show只是简单的基于css切换；
（3）编译条件：
v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译;
v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素保留；
（4）性能消耗：
v-if有更高的切换消耗；
v-show有更高的初始渲染消耗；
（5）使用场景：
v-if适合运营条件不大可能改变；
v-show适合频繁切换。
注意，v-show 不支持 <template> 元素，也不支持 v-else。
当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。当然并不推荐这种使用方法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何区分px，em和rem]]></title>
        <id>https://jwxhhxx.github.io//post/ru-he-qu-fen-pxem-he-rem</id>
        <link href="https://jwxhhxx.github.io//post/ru-he-qu-fen-pxem-he-rem">
        </link>
        <updated>2019-06-18T02:16:19.000Z</updated>
        <content type="html"><![CDATA[<p>PX特点</p>
<ol>
<li>
<p>IE无法调整那些使用px作为单位的字体大小；</p>
</li>
<li>
<p>国外的大部分网站能够调整的原因在于其使用了em或rem作为字体单位；</p>
</li>
<li>
<p>Firefox能够调整px和em，rem，但是很多中国网民使用IE浏览器(或内核)。</p>
</li>
</ol>
<blockquote>
<p>px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。</p>
</blockquote>
<blockquote>
<p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。(引自CSS2.0手册)</p>
</blockquote>
<p>任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。</p>
<p>EM特点</p>
<ol>
<li>
<p>em的值并不是固定的；</p>
</li>
<li>
<p>em会继承父级元素的字体大小</p>
</li>
</ol>
<p>所以我们在写CSS的时候，需要注意两点：</p>
<ol>
<li>
<p>body选择器中声明Font-size=62.5%；</p>
</li>
<li>
<p>将你的原来的px数值除以10，然后换上em作为单位；</p>
</li>
<li>
<p>重新计算那些被放大的字体的em数值。避免字体大小的重复声明。</p>
</li>
</ol>
<p>也就是避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。</p>
<p>rem特点</p>
<p>rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。下面就是一个例子：</p>
<p>p {font-size:14px; font-size:875rem;}</p>
<p>注意：
选择使用什么字体单位主要由你的项目来决定，如果你的用户群都使用最新版的浏览器，那推荐使用rem，如果要考虑兼容性，那就使用px,或者两者同时使用。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS中关于this 的用法]]></title>
        <id>https://jwxhhxx.github.io//post/js-zhong-guan-yu-this-de-yong-fa</id>
        <link href="https://jwxhhxx.github.io//post/js-zhong-guan-yu-this-de-yong-fa">
        </link>
        <updated>2019-06-18T00:36:58.000Z</updated>
        <content type="html"><![CDATA[<p>1.在一般函数方法中使用 this 指代全局对象</p>
<pre><code>function test(){
　　　　this.x = 1;
　　　　alert(this.x);
　　}
　　test(); // 1
</code></pre>
<p>2.作为对象方法调用，this 指代上级对象</p>
<pre><code>function test(){
　　alert(this.x);
}
var o = {};
o.x = 1;
o.m = test;
o.m(); // 1
</code></pre>
<p>3.作为构造函数调用，this 指代new 出的对象</p>
<pre><code>　　function test(){
　　　　this.x = 1;
　　}
　　var o = new test();
　　alert(o.x); // 1
    //运行结果为1。为了表明这时this不是全局对象，我对代码做一些改变：
　　var x = 2;
　　function test(){
　　　　this.x = 1;
　　}
　　var o = new test();
　　alert(x); //2
</code></pre>
<p>4.apply 调用 ，apply方法作用是改变函数的调用对象，此方法的第一个参数为改变后调用这个函数的对象，this指代第一个参数</p>
<pre><code>　var x = 0;
　　function test(){
　　　　alert(this.x);
　　}
　　var o={};
　　o.x = 1;
　　o.m = test;
　　o.m.apply(); //0
//apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。如果把最后一行代码修改为

　　o.m.apply(o); //1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS中的各种width]]></title>
        <id>https://jwxhhxx.github.io//post/js-zhong-de-ge-chong-width</id>
        <link href="https://jwxhhxx.github.io//post/js-zhong-de-ge-chong-width">
        </link>
        <updated>2019-06-17T06:33:55.000Z</updated>
        <content type="html"><![CDATA[<p>网页可见区域宽： document.body.clientWidth;
网页可见区域高： document.body.clientHeight;
网页可见区域宽： document.body.offsetWidth   (包括边线的宽);
网页可见区域高： document.body.offsetHeight  (包括边线的宽);
网页正文全文宽： document.body.scrollWidth;
网页正文全文高： document.body.scrollHeight;
网页被卷去的高： document.body.scrollTop;
网页被卷去的左： document.body.scrollLeft;
网页正文部分上： window.screenTop;
网页正文部分左： window.screenLeft;
屏幕分辨率的高： window.screen.height;
屏幕分辨率的宽： window.screen.width;
屏幕可用工作区高度： window.screen.availHeight;
屏幕可用工作区宽度：window.screen.availWidth;</p>
<p><strong>1、offsetWidth width+padding+border)</strong></p>
<p>当前对象的宽度。</p>
<p>style.width也是当前对象的宽度(width+padding+border)。</p>
<p>区别：1)style.width返回值除了数字外还带有单位px；</p>
<p>2)如对象的宽度设定值为百分比宽度,则无论页面变大还是变小，</p>
<p>style.width都返回此百分比,而offsetWidth则返回在不同页面中对象的宽度值而不是百分比值；</p>
<p>3)如果没有给 HTML 元素指定过 width样式，则 style.width 返回的是空字符串；</p>
<p><strong>2、offsetHeight :(Height+padding+border)</strong></p>
<p>当前对象的高度。</p>
<p>style.height也是当前对象的高度(height+padding+border)。</p>
<p>区别：1)style.height返回值除了数字外还带有单位px；</p>
<p>2)如对象的高度设定值为百分比高度,则无论页面变高还是变矮，	style.height都返回此百分比,而offsetHeight则返回在不同页面中对象的高度值而不是百分比值；</p>
<p>3)如果没有给 HTML 元素指定过 height样式，则 style.height返回的是空字符串；</p>
<p><strong>3、offsetLeft :</strong></p>
<p>当前对象到其上级层左边的距离。</p>
<p>不能对其进行赋值.设置对象到其上级层左边的距离请用style.left属性。</p>
<p>style.left当前对象到其上级层左边的距离。</p>
<p>区别：1)style.left返回值除了数字外还带有单位px；</p>
<p>2)如对象到其上级层左边的距离设定值为百分比， style.left返回此百分比,而offsetLeft则返回到其上级层左边的距离的值；
3)如果没有给 HTML 元素指定过 left样式，则 style.left返回的是空字符串；</p>
<p><strong>4、offsetTop :</strong></p>
<p>当前对象到其上级层顶部边的距离。</p>
<p>不能对其进行赋值.设置对象到上级层顶部边的距离请用style.top属性。</p>
<p>style.top当前对象到其上级层顶部边的距离。</p>
<p>区别：1)style.top返回值除了数字外还带有单位px；</p>
<p>2)如对象到其上级层顶部边的距离设定值为百分比， style.top返回此百分比,而offsetTop则返回到其上级顶部边的距离的值；</p>
<p>3)如果没有给 HTML 元素指定过 top样式，则 style.top返回的是空字符串；</p>
<p>注意：如果上级层为body，由于IE、FF对padding、margin的解释不一样所以要明确规定处理不是下列的区别就不成立了。</p>
<p>IE   1)如果Div的上级层是body，而div与body之间有个div，如body-&gt;div-&gt;divo；divo的offsetTop=div的padding+margin+boder；</p>
<p>2）如果Div的上级层是body，如body&gt;divo；divo的offsetTop=div的padding+margin+boder；</p>
<p>这divo的offsetTop=divo的margin &gt;body.padding则为divo的margin，否则为body.padding谁大是谁？</p>
<p>FF  上述两种情况：offsetTop=margin+padding ;</p>
<p>(IE与FF中的body默认padding为10)在IE6.0 FF3.6.13</p>
<p>5、scrollWidth:获取对象的滚动宽度 。</p>
<p>6、scrollHeight: 获取对象的滚动高度。</p>
<p>7、scrollLeft:设置或获取位于对象左边界和对象中目前可见内容的最左端之间的距离(width+padding为一体)</p>
<p>8、scrollTop:设置或获取位于对象最顶端和对象中可见内容的最顶端之间的距离；(height+padding为一体)</p>
<p>9、clientWidth: 获取对象可见内容的宽度，不包括滚动条，不包括边框；</p>
<p>10、clientHeight: 获取对象可见内容的高度，不包括滚动条，不包括边框；</p>
<p>11、clientLeft: 获取对象的border宽度</p>
<p>12、clientTop：获取对象的border高度</p>
<p>13、offsetParent :当前对象的上级层对象.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于JS的IIFE]]></title>
        <id>https://jwxhhxx.github.io//post/guan-yu-js-de-iife</id>
        <link href="https://jwxhhxx.github.io//post/guan-yu-js-de-iife">
        </link>
        <updated>2019-06-17T06:26:22.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1定义">1.定义</h1>
<p>IIFE: Immediately Invoked Function Expression，意为立即调用的函数表达式，也就是说，声明函数的同时立即调用这个函数。
对比一下，这是不采用IIFE时的函数声明和函数调用：</p>
<pre><code>function foo(){
  var a = 10;
  console.log(a);
}
 
foo();
</code></pre>
<p>下面是IIFE形式的函数调用：</p>
<pre><code>(functionfoo(){
  vara=10;
  console.log(a);
})();
</code></pre>
<p>函数的声明和IIFE的区别在于，在函数的声明中，我们首先看到的是function关键字，而IIFE我们首先看到的是左边的（。也就是说，使用一对（）将函数的声明括起来，使得JS编译器不再认为这是一个函数声明，而是一个IIFE，即需要立刻执行声明的函数。
两者达到的目的是相同的，都是声明了一个函数foo并且随后调用函数foo。</p>
<h1 id="2使用iife的好处">2使用IIFE的好处</h1>
<p>如果只是为了立即执行一个函数，显然IIFE所带来的好处有限。实际上，IIFE的出现是为了弥补JS在scope方面的缺陷：JS只有全局作用域（global scope）、函数作用域（function scope），从ES6开始才有块级作用域（block scope）。对比现在流行的其他面向对象的语言可以看出，JS在访问控制这方面是多么的脆弱！那么如何实现作用域的隔离呢？在JS中，只有function才能实现作用域隔离，因此如果要将一段代码中的变量、函数等的定义隔离出来，只能将这段代码封装到一个函数中。
在我们通常的理解中，将代码封装到函数中的目的是为了复用。在JS中，当然声明函数的目的在大多数情况下也是为了复用，但是JS迫于作用域控制手段的贫乏，我们也经常看到只使用一次的函数：这通常的目的是为了隔离作用域了！既然只使用一次，那么立即执行好了！既然只使用一次，函数的名字也省掉了！这就是IIFE的由来。</p>
<h1 id="3-iife的常见形式">3 IIFE的常见形式</h1>
<pre><code>(function foo(){
  var a = 10;
  console.log(a);
})();
</code></pre>
<h1 id="4-iife的函数名和参数">4 IIFE的函数名和参数</h1>
<p>IIFE确实只执行一次，给IIFE起个名字有些画蛇添足了。如果非要给IIFE起个名字，干脆就叫IIFE好了。
IIFE可以带（多个）参数，比如下面的形式：</p>
<pre><code>var a = 2;
(function IIFE(global){
    var a = 3;
    console.log(a); // 3
    console.log(global.a); // 2
})(window);
 
console.log(a); // 2
</code></pre>
<h1 id="小结">小结</h1>
<p>IIFE的目的是为了隔离作用域，防止污染全局命名空间。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ javascript中报Uncaught ReferenceError: XXX is not defined]]></title>
        <id>https://jwxhhxx.github.io//post/javascript-zhong-bao-uncaught-referenceerror-xxx-is-not-defined</id>
        <link href="https://jwxhhxx.github.io//post/javascript-zhong-bao-uncaught-referenceerror-xxx-is-not-defined">
        </link>
        <updated>2019-06-17T05:09:56.000Z</updated>
        <content type="html"><![CDATA[<p><strong>在写javascript函数的时候，JavaScript写在哪里？通常有三种形式：</strong></p>
<ol>
<li>内部：Html网页的<body></body>中；</li>
<li>内部：Html网页的<head></head>中；</li>
<li>外部：外部JS文件里。</li>
<li></li>
</ol>
<p>(1) 写在<body></body>中
当浏览器载入网页Body部分的时候，就执行其中的Javascript语句，执行之后输出的内容就显示在网页中。
(2)写在<head></head>中
当不希望一载入HTML就运行javascript时，而是通过触发事件，这使通常将Javascript放在HTML的<head></head>里。
（3）引入外部的js文件。
刚开始学习的时候，有时候会遇到未定义的情况，那么有哪些原因会导致这种情况呢？
  1）JS函数未定义。（这种低级的相信大家都不会犯，但是不排除定义的函数和声明的函数名称不一致的情况，或     者传入参数不一致）
  2）将Javascript函数放在了body和head之外了。
  3）Javascript函数定义在对象声明之前。你的代码是直接就能运行的话,要是代码所操作的对象在代码后面,有的   浏览器会返回错误.因为它们是按顺序加载对象。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://jwxhhxx.github.io//post/hello-gridea</id>
        <link href="https://jwxhhxx.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>